library MovementData requires Actions, String

public function Enlist takes unit uTarget returns nothing
    call GroupAddUnit(MovementManager_unitGroup, uTarget)
endfunction

public function Delist takes unit uTarget returns nothing
    call GroupRemoveUnit(MovementManager_unitGroup, uTarget)
endfunction

struct MovementType
    public static constant integer Linear = 0
    public static constant integer Smooth = 1
endstruct

interface BaseMovementData
    public Action onPlayEnd = NULL
    //움직임을 적용할 대상
    public unit uTargetUnit
    //움직임의 각도
    public real fAngle
    //총 이동거리
    public real fDistance
    //타이머
    public real fTimer
    //지속시간
    public real fTime
    ///컨트롤가능한가
    public boolean isControllable
    //충돌무시하는가?
    public boolean isPassable
    //중지되었는가
    public boolean isStopped
    //고유한가? 고유하다면 다음에 들어오는 새로운 movement효과를 무시하게됨
    public boolean isUnique
    
    public integer eMovementType
    //만료되었는가?
    public method isExpired takes nothing returns boolean
    //재생
    public method Play takes real dt returns nothing
    //중지
    public method Stop takes nothing returns nothing
    //재생이 시작됨
    public method OnPlayStart takes nothing returns nothing
    //재생이 종료됨
    public method OnPlayEnd takes nothing returns nothing
    
    public method SetMovementType takes MovementType movementType returns BaseMovementData

    public method GetProgress takes nothing returns real
endinterface

struct MovementData extends BaseMovementData
    //초당 이동속도 상승치 (이동가속도)
    private real fAcceleration = 0
    private real fAccelerationValue = 0
    private real fLastSmoothSpeed = 0
    
    public static method create takes unit uTargetUnit, real fAngle, real fDistance, real fTime, real fAcceleration, boolean isControllable, boolean isPassable returns thistype
        local thistype this = thistype.allocate(  )
        set this.uTargetUnit = uTargetUnit
        set this.fAngle = fAngle
        set this.fDistance = fDistance
        set this.fAcceleration = fAcceleration
        set this.fTimer = 0
        set this.fTime = fTime
        set this.isControllable = isControllable
        set this.isPassable = isPassable
        set this.isStopped = false
        set this.eMovementType = MovementType.Linear
        set this.fLastSmoothSpeed = 0
        set this.fAccelerationValue = GetAcclerationValue(fAcceleration)
        set this.isUnique = false
        return this
    endmethod
    
    public method isExpired takes nothing returns boolean
        if(isStopped) then
            return true
        endif
        if(uTargetUnit == null) then
            //call FLog("[MovementManager-isExpired] true 1")
            return true
        endif
        if(isUnitDead(uTargetUnit)) then
            //call FLog("[MovementManager-isExpired] true 2")
            return true
        endif
        if (fTimer >= fTime) then
            //debug call Log("[MovementManager-isExpired] true 3 fTimer:"+R2S(fTimer)+" fTime:"+R2S(fTime))
            return true
        endif
            //debug call Log("[MovementManager-isExpired] false")
        return false
    endmethod
    
    private method GetAcclerationValue takes real totalAcceleration returns real
        local real Acceleration = 0
        local real totalLoop = fTime/MovementManager_fUpdatePeriod
        local real result = (totalLoop+1)*totalLoop/2
        set Acceleration = totalAcceleration/result
        return Acceleration
    endmethod
    
    private method GetCurrAcceleration takes real dt returns real
            //debug call Log("i = "+R2S(fTimer/dt)+" fAccelerationValue = " +R2S(fAccelerationValue))
            return fTimer/dt * fAccelerationValue * 1000
    endmethod
    
    private method GetMoveSpeed takes real dt returns real
        local real fMovementSpeed = 0
        local real fSmoothSpeed = 0
        if(eMovementType == MovementType.Linear) then
            set fMovementSpeed = (fDistance * dt / fTime) + GetCurrAcceleration(dt) * 0.001
        elseif(eMovementType == MovementType.Smooth) then
            set fSmoothSpeed = SmoothStep(0, fDistance, GetProgress())
            set fMovementSpeed = fSmoothSpeed-fLastSmoothSpeed
            //debug call Log("************************************")
            //debug call Log("GetProgress : " + R2S(GetProgress()))
            //debug call Log("fSmoothSpeed : " + R2S(fSmoothSpeed))
            //debug call Log("fDistance : " + R2S(fDistance))
            //debug call Log("fMovementSpeed : " + R2S(fMovementSpeed))
            set fLastSmoothSpeed = fSmoothSpeed
        endif
        return fMovementSpeed
    endmethod
    
    public method Play takes real dt returns nothing
        local real fMoveSpeed = GetMoveSpeed(dt)
        local location uUnitLocation = GetUnitLoc(uTargetUnit)
        local location locNext = PolarProjectionBJ(uUnitLocation, fMoveSpeed, fAngle)
        local real nextX = 0
        local real nextY = 0
        //if(fMoveSpeed > 15) then
        //    call FLog(GetUnitName(uTargetUnit) + " fTime " + R2S(fTime))
        //    call FLog(GetUnitName(uTargetUnit) + " fDistance " + R2S(fDistance))
        //    call FLog(GetUnitName(uTargetUnit) + " fAccelerationValue " + R2S(fAccelerationValue))
        //    call FLog(GetUnitName(uTargetUnit) + " GetCurrAcceleration " + R2S(GetCurrAcceleration(dt)))
        //    call FLog(GetUnitName(uTargetUnit) + " fMoveSpeed " + R2S(fMoveSpeed))
        //    call FLog(GetUnitName(uTargetUnit) + " locNext 1 " + GetLocationString(locNext))
        //endif
        if(isControllable) then
            if(not isPassable)then
                call SetUnitPosition(uTargetUnit,GetLocationX(locNext),GetLocationY(locNext))
            endif
            
            set nextX = GetLocationX(locNext)
            set nextY = GetLocationY(locNext)
            if(nextY < -11486) then
                set nextY = -11486 + 10
            endif
            
            if(nextY > 8000) then
                set nextY = 8000 - 10
            endif
            
             if(nextX < -8000) then
                set nextX = -8000 + 10
            endif
            
            if(nextX > 11500) then
                set nextX = 11500 - 10
            endif
            call SetUnitX(uTargetUnit,nextX)
            call SetUnitY(uTargetUnit,nextY)
        else 
            call SetUnitPosition(uTargetUnit,GetLocationX(locNext),GetLocationY(locNext))
        endif
        //call FLog(GetUnitName(uTargetUnit) + " locNext 2 " + GetLocationString(locNext))
        //debug call Log("[MovementManager-fMoveSpeed] "+R2S(fMoveSpeed))
        set fMoveSpeed = fMoveSpeed + ( fAcceleration * dt )
        //debug call Log("[MovementManager-fMoveSpeed] "+R2S(fMoveSpeed))
        
        set fTimer = fTimer + dt
        
        call RemoveLocation(uUnitLocation)
        call RemoveLocation(locNext)
        
        set uUnitLocation  = null
        set locNext = null
    endmethod
    
    public method Stop takes nothing returns nothing
        set isStopped = true
    endmethod
    
    public method OnPlayStart takes nothing returns nothing
        //충돌무시
        if(isPassable) then
            call SetUnitPathing(uTargetUnit, false)
        endif
        
        if(isUnique) then
            call Enlist(uTargetUnit)
        endif
    endmethod
    
    private method OnPlayEnd takes nothing returns nothing
        if(onPlayEnd != NULL) then
            call onPlayEnd.execute()
        endif
        //충돌무시
        if(isPassable) then
            call SetUnitPathing(uTargetUnit, true)
        endif
         
        if(isUnique) then
            call Delist(uTargetUnit)
        endif
    endmethod
    
    public method SetMovementType takes MovementType movementType returns BaseMovementData
        set eMovementType = movementType
        return this
    endmethod
    
    public method GetProgress takes nothing returns real
        return fTimer/fTime
    endmethod
    
    public method SetUnique takes nothing returns BaseMovementData
        set isUnique = true
        return this
    endmethod
    
    method onDestroy takes nothing returns nothing
        call OnPlayEnd()
        set uTargetUnit = null
        set onPlayEnd = NULL
    endmethod
endstruct


endlibrary

//대상에게 힘을 가합니다.
// MovementManager_Play(유닛, 거리 , 속도(초당), 가속도(초당), 시간, 각도, 대상 조작가능여부)
//.추가옵션
//